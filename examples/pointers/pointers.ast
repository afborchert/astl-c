#!../../astl-c/astl-c

/*
   follow pointer variables through the use of state machines
   where we try to keep track whether a pointer value is
   undefined, well-defined, null, non-null or freed
*/

library "../../lib";
import ops;
import printer;
import symtab;
import cfg;
import sm;

/*
   track null pointers and other pointer values, i.e.
    - recognize "0" or "(void*)0" or other similar casts as null pointer
      or as possible null pointer
    - recognize invocations of calloc/malloc/realloc as
      welldefined pointers which are either 0 or non-null
    - assume that the address operator & delivers a welldefined non-null
      pointer
*/

attribution rules {
   ("integer_constant" m{^0+[LUlu]*$}) as const -> {
      const.ptrval = "null";
   }
   ("octal_constant" m{^0+[LUlu]*$}) as const -> {
      const.ptrval = "null";
   }
   ("hexadecimal_constant" m{^0[xX]0+[LUlu]*$}) as const -> {
      const.ptrval = "null";
   }
   ("cast_expression" type_name value) as expr -> post {
      if (exists value.ptrval && exists expr.t &&
	    (is_integer(expr.t) || is_pointer(expr.t))) {
	 expr.ptrval = value.ptrval;
      }
   }
   ("," expr1 expr2) as expr -> post {
      if (exists expr2.ptrval) {
	 expr.ptrval = expr2.ptrval;
      }
   }
   ("=" lvalue rvalue) as expr -> post {
      if (exists rvalue.ptrval) {
	 expr.ptrval = rvalue.ptrval;
      }
   }
   ("expression" e) as expr -> post {
      if (exists e.ptrval) {
	 expr.ptrval = e.ptrval;
      }
   }
   ("initializer" ("expression" expr)) as initializer -> post {
      if (exists expr.ptrval) {
	 initializer.ptrval = expr.ptrval;
      }
   }
   ("function_call" ("identifier" m{^(?:re|m|c)alloc$}) args...)
	 as expr -> post {
      expr.ptrval = "welldefined";
   }
   ("address_of" *) as expr -> post {
      expr.ptrval = "nonnull";
   }
}

/*
   state machine that tracks pointer variables
*/

state machine localptr: local_tracker (
      undefined,         /* initial state: value of pointer is undefined */
      welldefined,
      nonnull,
      isnull,
      freed
   ) {
   shared var varname; /* name of the variable */
   shared var vartype; /* type of the pointer variable */
   shared var block;   /* block where the variable was declared */
   shared var object;  /* corresponding object in symbol table */
   private var ptrval; /* short for node.astnode.ptrval */
   private var update; /* do we need to update state according to ptrval? */

   /* create new instance whenever a pointer variable is declared */
   at vardecl
	 where exists node.block &&
	 !node.object.static &&
	 node.vartype.kind == "pointer" -> create {
      varname = node.varname;
      vartype = node.vartype;
      object = node.object;
      block = node.block;
   }

   /* kill this instance when we are leaving the block
      where this variable was declared */
   at close_block where node.astnode == block -> close

   at * -> {
      ptrval = null;
      if (exists node.astnode.ptrval) {
	 ptrval = node.astnode.ptrval;
      }
      update = false;
   }
   at varinit_end where object == node.object -> {
      update = true;
   }
   ("=" lvalue rvalue) at assignment_end
	 where exists node.object && object == node.object -> {
      update = true;
   }
   at * where update && ptrval == "null" -> isnull
   at * where update && ptrval == "welldefined" -> welldefined
   at * where update && ptrval == "nonnull" -> nonnull
   at * where update && ptrval == null -> nonnull

   /* track invocations of free/cfree where our pointer variable
      is given */
   ("function_call" ("identifier" m{^c?free$})
      ("argument_expression_list" ("identifier" varname) as id)) at call
	 where exists id.object && id.object == object
	 when welldefined or nonnull -> freed
	 when freed -> cut {
	    err(varname, ": freeing an already freed pointer");
	 }
	 when undefined -> cut {
	    err(varname, ": freeing an undefined pointer");
	 }

   /* track when our pointer is tested against NULL,
      this allows to proceed from welldefined to nonnull or isnull
   */
   ("identifier" varname) as id at conditional_fork
      where exists id.object && id.object == object
      if t and when welldefined -> nonnull
      if t and when isnull -> cut
      if f and when welldefined -> isnull
      if f and when nonnull -> cut
   ("!" ("identifier" varname) as id) at conditional_fork
      where exists id.object && id.object == object
      if t and when welldefined -> isnull
      if t and when nonnull -> cut
      if f and when welldefined -> nonnull
      if f and when isnull -> cut
   ("!=" ("identifier" varname) as id value) at conditional_fork
      where exists value.ptrval && value.ptrval == "null" &&
	 exists id.object && id.object == object
      if t and when welldefined -> nonnull
      if t and when isnull -> cut
      if f and when welldefined -> isnull
      if f and when nonnull -> cut
   ("==" ("identifier" varname) as id value) at conditional_fork
      where exists value.ptrval && value.ptrval == "null" &&
	 exists id.object && id.object == object
      if t and when welldefined -> isnull
      if t and when nonnull -> cut
      if f and when welldefined -> nonnull
      if f and when isnull -> cut

   /* track when our pointer is dereferenced */
   ("pointer_dereference" ("identifier" varname) as id)
      where exists id.object && id.object == object
      when undefined -> cut {
	 err(varname, ": dereferencing undefined pointer");
      }
      when welldefined -> cut {
	 err(varname, ": dereferenced pointer has not been tested against 0");
      }
      when freed -> cut {
	 err(varname, ": dereferencing an already freed pointer");
      }
      when isnull -> cut {
	 err(varname, ": dereferenced pointer is 0");
      }
   ("[]" ("identifier" varname) as id index)
      where exists id.object && id.object == object
      when undefined -> cut {
	 err(varname, ": dereferencing undefined pointer");
      }
      when welldefined -> cut {
	 err(varname, ": dereferenced pointer has not been tested against 0");
      }
      when freed -> cut {
	 err(varname, ": dereferencing an already freed pointer");
      }
      when isnull -> cut {
	 err(varname, ": dereferenced pointer is 0");
      }
   /* check other pointer usages */
   ("identifier" varname) as id
	 in ([assignment_operators] lvalue here) as stmt
	 and ! in ("address_of" *) and ! in ("sizeof" *)
      where exists id.object && id.object == object
      when undefined -> cut {
	 err(varname, ": using an undefined pointer in ", gentext(stmt));
      }
      when freed -> cut {
	 err(varname, ": assigning a freed pointer");
      }
   ("identifier" varname) as id
	 ! in ([assignment_operators] *)
	 and ! in ("address_of" *) and ! in ("sizeof" *)
      where exists id.object && id.object == object
      when undefined -> cut {
	 err(varname, ": using an undefined pointer");
      }
      when freed -> cut {
	 err(varname, ": using a freed pointer");
      }
}
