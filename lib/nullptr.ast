/*
   Copyright (C) 2011 Andreas Franz Borchert and Yan Wang
   ----------------------------------------------------------------------------
   The Astl Library for C is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   The Astl Library for C is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/

/*
   track null pointers,
   i.e. recognize "0" or "(void*)0" or other similar casts as null pointer
   or as possible null pointer
*/

import symtab;

attribution rules {
   ("integer_constant" m{^0+[LUlu]*$}) as const -> {
      const.nullptr = true;
   };
   ("octal_constant" m{^0+[LUlu]*$}) as const -> {
      const.nullptr = true;
   };
   ("hexadecimal_constant" m{^0[xX]0+[LUlu]*$}) as const -> {
      const.nullptr = true;
   };
   ("cast_expression" type_name value) as expr -> post {
      if (exists value.nullptr && exists expr.t &&
	    (is_integer(expr.t) || is_pointer(expr.t))) {
	 expr.nullptr = true;
      }
   };
   ("," expr1 expr2) as expr -> post {
      if (exists expr2.nullptr) {
	 expr.nullptr = true;
      }
   };
   ("=" lvalue rvalue) as expr -> post {
      if (exists rvalue.nullptr) {
	 expr.nullptr = true;
      }
   };
   ("expression" e) as expr -> post {
      if (exists e.nullptr) {
	 expr.nullptr = true;
      }
   };
   ("initializer" ("expression" expr)) as initializer -> post {
      if (exists expr.nullptr) {
	 initializer.nullptr = true;
      }
   };
}
